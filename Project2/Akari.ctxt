#BlueJ class context
comment0.target=Akari
comment1.params=filename
comment1.target=Akari(java.lang.String)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Akari.\ \r\n\ Creates\ and\ initialises\ the\ fields\ with\ the\ contents\ of\ filename.\ \r\n\ The\ layout\ of\ a\ puzzle\ file\ is\ described\ on\ the\ LMS\ page;\ \r\n\ you\ may\ assume\ the\ layout\ is\ always\ correct.\ \r\n
comment10.params=x
comment10.target=int\ parseIndex(char)
comment10.text=\r\n\ Returns\ the\ int\ equivalent\ of\ x.\ \r\n\ If\ x\ is\ a\ digit,\ returns\ 0\ ->\ 0,\ 1\ ->\ 1,\ etc;\ \r\n\ if\ x\ is\ an\ upper-case\ letter,\ returns\ A\ ->\ 10,\ B\ ->\ 11,\ etc;\ \r\n\ o/w\ throws\ an\ illegal\ argument\ exception.\ \r\n
comment11.params=r\ c
comment11.target=void\ leftClick(int,\ int)
comment11.text=\r\n\ Performs\ a\ left\ click\ on\ the\ square\ at\ r,c\ if\ the\ indices\ are\ legal,\ o/w\ does\ nothing.\ \r\n\ If\ r,c\ is\ empty,\ a\ bulb\ is\ placed;\ if\ it\ has\ a\ bulb,\ that\ bulb\ is\ removed.\r\n
comment12.params=
comment12.target=void\ clear()
comment12.text=\r\n\ Sets\ all\ mutable\ squares\ on\ the\ board\ to\ empty.\r\n
comment13.params=r\ c
comment13.target=int\ numberOfBulbs(int,\ int)
comment13.text=\r\n\ Returns\ the\ number\ of\ bulbs\ adjacent\ to\ the\ square\ at\ r,c.\ \r\n\ Throws\ an\ illegal\ argument\ exception\ if\ r,c\ are\ illegal\ coordinates.\r\n
comment14.params=r\ c
comment14.target=boolean\ canSeeBulb(int,\ int)
comment14.text=\r\n\ Returns\ true\ iff\ the\ square\ at\ r,c\ is\ lit\ by\ a\ bulb\ elsewhere.\ \r\n\ Throws\ an\ illegal\ argument\ exception\ if\ r,c\ are\ illegal\ coordinates.\r\n
comment15.params=
comment15.target=java.lang.String\ isSolution()
comment15.text=\r\n\ Returns\ an\ assessment\ of\ the\ state\ of\ the\ puzzle,\ either\ \r\n\ "Clashing\ bulb\ at\ r,c",\ \r\n\ "Unlit\ square\ at\ r,c",\ \r\n\ "Broken\ number\ at\ r,c",\ or\r\n\ three\ ticks,\ as\ on\ the\ LMS\ page.\ \r\n\ r,c\ must\ be\ the\ coordinates\ of\ a\ square\ that\ has\ that\ kind\ of\ error.\ \r\n\ If\ there\ are\ multiple\ errors\ on\ the\ board,\ you\ may\ return\ any\ one\ of\ them.\ \r\n
comment16.params=
comment16.target=java.lang.String\ getCoordinates()
comment16.text=\r\n\ Returns\ just\ the\ coordinates\ of\ the\ square\ at\ the\ error\ found\ in\ isSolution().\r\n
comment17.params=
comment17.target=void\ solve()
comment17.text=\r\n\ Attempts\ to\ solve\ the\ puzzle\ by\ placing\ crosses\ on\ squares\ that\ cannot\ contain\ a\ bulb\r\n\ and\ placing\ bulbs\ where\ they\ definitely\ must\ go.\r\n\ Warning\:\ The\ Solver\ will\ loop\ infinitely\ if\ it\ cannot\ determine\ a\ solution.\r\n
comment2.params=sBlack
comment2.target=void\ setBlack(java.lang.String)
comment2.text=\r\n\ Interprets\ the\ second\ line\ of\ the\ file\r\n
comment3.params=line\ number
comment3.target=void\ setNumbers(java.lang.String,\ int)
comment3.text=\r\n\ Interprets\ the\ third\ to\ seventh\ line\ of\ the\ file\r\n
comment4.params=
comment4.target=Akari()
comment4.text=\r\n\ Uses\ the\ example\ file\ from\ the\ LMS\ page.\r\n
comment5.params=
comment5.target=java.lang.String\ getFilename()
comment5.text=\r\n\ Returns\ the\ name\ of\ the\ puzzle\ file.\r\n
comment6.params=
comment6.target=int\ getSize()
comment6.text=\r\n\ Returns\ the\ size\ of\ the\ puzzle.\r\n
comment7.params=k
comment7.target=boolean\ isLegal(int)
comment7.text=\r\n\ Returns\ true\ iff\ k\ is\ a\ legal\ index\ into\ the\ board.\ \r\n
comment8.params=r\ c
comment8.target=boolean\ isLegal(int,\ int)
comment8.text=\r\n\ Returns\ true\ iff\ r\ and\ c\ are\ both\ legal\ indices\ into\ the\ board.\ \r\n
comment9.params=r\ c
comment9.target=Space\ getBoard(int,\ int)
comment9.text=\r\n\ Returns\ the\ contents\ of\ the\ square\ at\ r,c\ if\ the\ indices\ are\ legal,\ \r\n\ o/w\ throws\ an\ illegal\ argument\ exception.\ \r\n
numComments=18
